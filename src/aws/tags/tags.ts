// generated by cdktf get
// git::https://github.com/sourcefuse/terraform-aws-refarch-tags
import { TerraformModule, TerraformModuleUserConfig } from "cdktf";
import { Construct } from "constructs";
export interface TagsConfig extends TerraformModuleUserConfig {
  /**
   * The environment the resource will be created in.
   */
  readonly environment: string;
  /**
   * Additional tags to add to your resources.
   * @default [object Object]
   * The property type contains a map, they have special handling, please see {@link cdk.tf/module-map-inputs the docs}
   */
  readonly extraTags?: { [key: string]: string };
  /**
   * The name of the project being worked on.
   */
  readonly project: string;
}
export class Tags extends TerraformModule {
  private readonly inputs: { [name: string]: any } = {};
  public constructor(scope: Construct, id: string, config: TagsConfig) {
    super(scope, id, {
      ...config,
      source: "git::https://github.com/sourcefuse/terraform-aws-refarch-tags",
    });
    this.environment = config.environment;
    this.extraTags = config.extraTags;
    this.project = config.project;
  }
  public get environment(): string {
    return this.inputs.environment as string;
  }
  public set environment(value: string) {
    this.inputs.environment = value;
  }
  public get extraTags(): { [key: string]: string } | undefined {
    return this.inputs.extra_tags as { [key: string]: string } | undefined;
  }
  public set extraTags(value: { [key: string]: string } | undefined) {
    this.inputs.extra_tags = value;
  }
  public get project(): string {
    return this.inputs.project as string;
  }
  public set project(value: string) {
    this.inputs.project = value;
  }
  public get extraTagsOutput() {
    return this.getString("extra_tags");
  }
  public get tagsOutput(): { [key: string]: string } {
    return this.getString("tags") as any;
  }
  protected synthesizeAttributes() {
    return this.inputs;
  }
}
